# NOTE: Generated By HttpRunner v3.1.6
# FROM: har\addWaterPrice.har
# encoding:utf-8

from httprunner import HttpRunner, Config, Step, RunRequest, RunTestCase


class TestCaseAddwaterprice(HttpRunner):

    config = Config("新增水价").verify(False)

    teststeps = [
        Step(
            RunRequest("/test-yx/basicinfo/basicPrice/addOrFlushBasicPrice")
            .post(
                "http://10.10.15.168/test-yx/basicinfo/basicPrice/addOrFlushBasicPrice"
            )
            .with_headers(
                **{
                    "Host": "10.10.15.168",
                    "Content-Length": "725",
                    "Accept": "application/json, text/plain, */*",
                    "Authorization": "Bearer 54bd6e9e-16b5-4622-aecd-19bb031f8df1",
                    "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/96.0.4664.45 Safari/537.36",
                    "Content-Type": "application/json",
                    "Origin": "http://10.10.15.168",
                    "Referer": "http://10.10.15.168/test-yx/ysfront/wuhan/",
                    "Accept-Encoding": "gzip, deflate",
                    "Accept-Language": "zh-CN,zh;q=0.9",
                    "Cookie": "jenkins-timestamper-offset=-28800000; jenkins-timestamper=system; jenkins-timestamper-local=true; screenResolution=1920x1080; JSESSIONID.e6f3caa7=node0wkn1cweq6xxg1w57amq3q1bcn271.node0",
                    "Connection": "keep-alive",
                }
            )
            .with_cookies(
                **{
                    "jenkins-timestamper-offset": "-28800000",
                    "jenkins-timestamper": "system",
                    "jenkins-timestamper-local": "true",
                    "screenResolution": "1920x1080",
                    "JSESSIONID.e6f3caa7": "node0wkn1cweq6xxg1w57amq3q1bcn271.node0",
                }
            )
            .with_json(
                {
                    "wpParentCode": "",
                    "wpName": "姘翠环1",
                    "wpStartDate": "2000-11-24 18:13:41",
                    "abodeCode": "00010",
                    "priceDetails": [
                        {
                            "piCode": "01",
                            "piName": "鍩烘湰姘磋垂",
                            "piType": "00",
                            "piTypeName": "鍩烘湰椤圭洰",
                            "pdId": "",
                            "wpCode": "",
                            "pdType": "0",
                            "pdPrice": 1.5,
                            "pdState": "Y",
                            "pdLadderType": "",
                            "wphId": "",
                            "pdhId": "",
                            "pdhStartDate": None,
                            "pdhEndDate": None,
                            "pdhVersion": "",
                            "priceLadderVos": [],
                            "priceLadderHisList": [],
                            "key": "01",
                            "CIndex": 0,
                        },
                        {
                            "piCode": "05",
                            "piName": "姹℃按澶勭悊璐�",
                            "piType": "00",
                            "piTypeName": "鍩烘湰椤圭洰",
                            "pdId": "",
                            "wpCode": "",
                            "pdType": "1",
                            "pdPrice": 1.55,
                            "pdState": "Y",
                            "pdLadderType": "",
                            "wphId": "",
                            "pdhId": "",
                            "pdhStartDate": None,
                            "pdhEndDate": None,
                            "pdhVersion": "",
                            "priceLadderVos": [],
                            "priceLadderHisList": [],
                            "key": "05",
                            "CIndex": 1,
                        },
                    ],
                }
            )
            .validate()
            .assert_equal("status_code", 200)
            .assert_equal('headers."Content-Type"', "application/json;charset=UTF-8")
            .assert_equal("body.status", "complete")
            .assert_equal("body.errorCode", "")
            .assert_equal("body.errorMessage", "")
            .assert_equal("body.count", 0)
            .assert_equal("body.success", True)
        ),
        Step(
            RunRequest("/test-yx/basicinfo/basicPrice/getPriceChilMenuAndAbode")
            .get(
                "http://10.10.15.168/test-yx/basicinfo/basicPrice/getPriceChilMenuAndAbode"
            )
            .with_headers(
                **{
                    "Host": "10.10.15.168",
                    "Accept": "application/json, text/plain, */*",
                    "Authorization": "Bearer 54bd6e9e-16b5-4622-aecd-19bb031f8df1",
                    "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/96.0.4664.45 Safari/537.36",
                    "Referer": "http://10.10.15.168/test-yx/ysfront/wuhan/",
                    "Accept-Encoding": "gzip, deflate",
                    "Accept-Language": "zh-CN,zh;q=0.9",
                    "Cookie": "jenkins-timestamper-offset=-28800000; jenkins-timestamper=system; jenkins-timestamper-local=true; screenResolution=1920x1080; JSESSIONID.e6f3caa7=node0wkn1cweq6xxg1w57amq3q1bcn271.node0",
                    "Connection": "keep-alive",
                }
            )
            .with_cookies(
                **{
                    "jenkins-timestamper-offset": "-28800000",
                    "jenkins-timestamper": "system",
                    "jenkins-timestamper-local": "true",
                    "screenResolution": "1920x1080",
                    "JSESSIONID.e6f3caa7": "node0wkn1cweq6xxg1w57amq3q1bcn271.node0",
                }
            )
            .validate()
            .assert_equal("status_code", 200)
            .assert_equal('headers."Content-Type"', "application/json;charset=UTF-8")
            .assert_equal("body.status", "complete")
            .assert_equal("body.errorCode", "")
            .assert_equal("body.errorMessage", "")
            .assert_equal("body.count", 0)
            .assert_equal("body.success", True)
        ),
    ]


if __name__ == "__main__":
    TestCaseAddwaterprice().test_start()
